// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// decompress
Rcpp::RawVector decompress(Rcpp::RawVector input);
RcppExport SEXP _wobbegong_decompress(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(decompress(input));
    return rcpp_result_gen;
END_RCPP
}
// dump_list_of_vectors
Rcpp::IntegerVector dump_list_of_vectors(Rcpp::List incoming, std::string output_file);
RcppExport SEXP _wobbegong_dump_list_of_vectors(SEXP incomingSEXP, SEXP output_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type incoming(incomingSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_file(output_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(dump_list_of_vectors(incoming, output_file));
    return rcpp_result_gen;
END_RCPP
}
// dump_dense_rows
Rcpp::List dump_dense_rows(Rcpp::RObject mat, std::string output_file, std::string rtype);
RcppExport SEXP _wobbegong_dump_dense_rows(SEXP matSEXP, SEXP output_fileSEXP, SEXP rtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type mat(matSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_file(output_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type rtype(rtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(dump_dense_rows(mat, output_file, rtype));
    return rcpp_result_gen;
END_RCPP
}
// dump_sparse_rows
Rcpp::List dump_sparse_rows(Rcpp::RObject mat, std::string output_file, std::string rtype);
RcppExport SEXP _wobbegong_dump_sparse_rows(SEXP matSEXP, SEXP output_fileSEXP, SEXP rtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type mat(matSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_file(output_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type rtype(rtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(dump_sparse_rows(mat, output_file, rtype));
    return rcpp_result_gen;
END_RCPP
}
// get_byte_order
Rcpp::CharacterVector get_byte_order();
RcppExport SEXP _wobbegong_get_byte_order() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(get_byte_order());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wobbegong_decompress", (DL_FUNC) &_wobbegong_decompress, 1},
    {"_wobbegong_dump_list_of_vectors", (DL_FUNC) &_wobbegong_dump_list_of_vectors, 2},
    {"_wobbegong_dump_dense_rows", (DL_FUNC) &_wobbegong_dump_dense_rows, 3},
    {"_wobbegong_dump_sparse_rows", (DL_FUNC) &_wobbegong_dump_sparse_rows, 3},
    {"_wobbegong_get_byte_order", (DL_FUNC) &_wobbegong_get_byte_order, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_wobbegong(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
